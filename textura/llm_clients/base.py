from abc import ABC, abstractmethod
from typing import Any, Optional, List # For kwargs and new method

from .types import Tool, LLMResponse

class BaseLLMClient(ABC):
    """
    Abstract base class for LLM client implementations.
    Ensures that any client used with agents (e.g., ExtractorAgent)
    provides a consistent interface.
    """

    @abstractmethod
    def predict(self, prompt: str, **kwargs: Any) -> str:
        """
        Sends a prompt to the LLM and returns the generated text response.

        Args:
            prompt: The prompt string to send to the LLM.
            **kwargs: Additional keyword arguments that specific LLM clients might support
                      (e.g., temperature, max_tokens, model_name if not part of constructor).

        Returns:
            The text response generated by the LLM.
        """
        pass

    @abstractmethod
    def predict_with_tools(self, prompt: str, tools: Optional[List[Tool]] = None, **kwargs: Any) -> LLMResponse:
        """
        Sends a prompt to the LLM, optionally with a list of tools (functions)
        the LLM can choose to call.

        Args:
            prompt: The prompt string to send to the LLM.
            tools: An optional list of Tool objects, where each Tool contains
                   function declarations available to the LLM.
            **kwargs: Additional keyword arguments that specific LLM clients might support.

        Returns:
            An LLMResponse object, which will contain either a direct text response
            or a list of function calls requested by the LLM.
        """
        pass
